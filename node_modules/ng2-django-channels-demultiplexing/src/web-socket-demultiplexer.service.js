"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var web_socket_service_1 = require("./web-socket.service");
var WebSocketDemultiplexerService = (function () {
    function WebSocketDemultiplexerService(webSocketService) {
        var _this = this;
        this.webSocketService = webSocketService;
        this.webSocketService.getDataStream().subscribe(function (message) {
            _this.onmessage(JSON.parse(message));
        }, function (message) {
            console.log("error", message);
        }, function () {
            console.log("complete");
        });
        this.eventByStream = new Map();
    }
    WebSocketDemultiplexerService.prototype.onmessage = function (data) {
        if (!this.eventByStream.has(data.stream)) {
            // No one is subscribed to this stream, ignore
            return;
        }
        var eventEmitter = this.eventByStream.get(data.stream);
        eventEmitter.emit(data.payload);
    };
    WebSocketDemultiplexerService.prototype.sendData = function (stream, payload) {
        this.webSocketService.sendData(JSON.stringify({
            'stream': stream,
            'payload': payload,
        }));
    };
    WebSocketDemultiplexerService.prototype.subscribe = function (stream, callback) {
        if (!this.eventByStream.has(stream)) {
            this.eventByStream.set(stream, new core_1.EventEmitter());
        }
        var eventEmitter = this.eventByStream.get(stream);
        eventEmitter.subscribe(callback);
    };
    return WebSocketDemultiplexerService;
}());
WebSocketDemultiplexerService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [web_socket_service_1.WebSocketService])
], WebSocketDemultiplexerService);
exports.WebSocketDemultiplexerService = WebSocketDemultiplexerService;
//# sourceMappingURL=web-socket-demultiplexer.service.js.map