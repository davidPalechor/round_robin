"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var ng2_django_channels_demultiplexing_1 = require("ng2-django-channels-demultiplexing");
var WebSocketDataBindingService = (function () {
    function WebSocketDataBindingService(webSocketDemultiplexerService) {
        this.webSocketDemultiplexerService = webSocketDemultiplexerService;
        this.eventByStreamModel = new Map();
    }
    WebSocketDataBindingService.prototype.onmessage = function (stream, payload) {
        if (!this.eventByStreamModel.has(stream)) {
            // No one is subscribed to this ModelStream, ignore
            return;
        }
        var eventByModel = this.eventByStreamModel.get(stream);
        if (!eventByModel.has(payload.model)) {
            // No one is subscribed to this Model, ignore
            return;
        }
        var eventEmitter = eventByModel.get(payload.model);
        eventEmitter.emit(payload);
    };
    WebSocketDataBindingService.prototype.create = function (stream, model, data) {
        this.webSocketDemultiplexerService.sendData(stream, {
            'action': 'create',
            'model': model,
            'data': data,
        });
    };
    WebSocketDataBindingService.prototype.update = function (stream, model, pk, data) {
        this.webSocketDemultiplexerService.sendData(stream, {
            'action': 'update',
            'model': model,
            'pk': pk,
            'data': data,
        });
    };
    WebSocketDataBindingService.prototype.delete = function (stream, model, pk) {
        this.webSocketDemultiplexerService.sendData(stream, {
            'action': 'delete',
            'model': model,
            'pk': pk,
        });
    };
    WebSocketDataBindingService.prototype.subscribe = function (stream, model, callback) {
        var _this = this;
        if (!this.eventByStreamModel.has(stream)) {
            this.eventByStreamModel.set(stream, new Map());
        }
        var eventByModel = this.eventByStreamModel.get(stream);
        if (!eventByModel.has(model)) {
            eventByModel.set(model, new core_1.EventEmitter());
        }
        var eventEmitter = eventByModel.get(model);
        eventEmitter.subscribe(callback);
        this.webSocketDemultiplexerService.subscribe(stream, function (payload) {
            _this.onmessage(stream, payload);
        });
    };
    return WebSocketDataBindingService;
}());
WebSocketDataBindingService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [ng2_django_channels_demultiplexing_1.WebSocketDemultiplexerService])
], WebSocketDataBindingService);
exports.WebSocketDataBindingService = WebSocketDataBindingService;
//# sourceMappingURL=web-socket-data-binding.service.js.map